-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["6"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -19.5, 218.5  ,  -12.5, 219.5  ,  -12.5, 225.5  ,  -19.5, 225.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   11.5, 225.5  ,  11.5, 219.5  ,  20.5, 217.5  ,  19.5, 225.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   34.5, 100.5  ,  -19.5, 218.5  ,  -47.5, 168.5  ,  -34.5, 111.5  ,  -10.5, 50.5  ,  7.5, 49.5  ,  36.5, 63.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -10.5, 50.5  ,  -34.5, 111.5  ,  -40.5, 63.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   54.5, 122.5  ,  58.5, 131.5  ,  58.5, 149.5  ,  55.5, 154.5  ,  50.5, 161.5  ,  38.5, 113.5  ,  49.5, 115.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -53.5, 171.5  ,  -47.5, 168.5  ,  -19.5, 218.5  ,  -34.5, 215.5  ,  -47.5, 211.5  ,  -53.5, 207.5  ,  -58.5, 196.5  ,  -59.5, 180.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   46.5, 102.5  ,  38.5, 111.5  ,  34.5, 100.5  ,  46.5, 97.5  ,  47.5, 98.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -59.5, 139.5  ,  -34.5, 111.5  ,  -47.5, 168.5  ,  -54.5, 162.5  ,  -59.5, 151.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -45.5, 123.5  ,  -59.5, 139.5  ,  -56.5, 132.5  ,  -51.5, 126.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -58.5, 110.5  ,  -34.5, 111.5  ,  -45.5, 123.5  ,  -58.5, 114.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   20.5, 217.5  ,  50.5, 161.5  ,  55.5, 167.5  ,  58.5, 174.5  ,  58.5, 191.5  ,  54.5, 200.5  ,  43.5, 210.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -5.5, -201.5  ,  0.5, -201.5  ,  17.5, -176.5  ,  6.5, 0.5  ,  -14.5, -74.5  ,  -23.5, -174.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   6.5, 0.5  ,  7.5, 49.5  ,  -10.5, 50.5  ,  -14.5, -74.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   20.5, 217.5  ,  11.5, 219.5  ,  -12.5, 219.5  ,  -19.5, 218.5  ,  38.5, 113.5  ,  50.5, 161.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   38.5, 111.5  ,  38.5, 113.5  ,  -19.5, 218.5  ,  34.5, 100.5  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

